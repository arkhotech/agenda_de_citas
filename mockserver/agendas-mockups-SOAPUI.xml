<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0c959e0f-27a0-4078-ac82-a3573f3d57b4" activeEnvironment="Default" name="Calendar Services" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6c92b63e-7120-4a76-b2a9-23713f5fc23e" wadlVersion="http://wadl.dev.java.net/2009/02" name="Agenda" type="rest" basePath="/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Esquema en el que estarán construidos los servicios para la aplicación de agendador de citas</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://Marcelos-MBP:8089/</con:endpoint><con:endpoint>http://dev2.arkho.tech:80</con:endpoint><con:endpoint>http://localhost:80</con:endpoint><con:endpoint>http://localhost:8089</con:endpoint></con:endpoints><con:resource name="/appointment/assists/{appointment_id}" path="/appointment/assists/{appointment_id}" id="280a8d2e-3eb1-4e54-8f1c-2a90f5a5b76a"><con:settings/><con:parameters/><con:method name="putAppointmentAssistsAppointment_id" id="18f2e32f-3d79-4f71-a627-b550f6fadb90" method="PUT"><con:description>Actualiza una cita a asistió o no asistió
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appointment_id</con:name><con:style>TEMPLATE</con:style><con:description>ID de la cita</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="31674f0b-7f4a-4b93-8752-3958a133871f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/appointments/available/{calendar_id}" path="/appointments/available/{calendar_id}" id="7ceb1dba-870a-4c6c-adf8-2b85c33cfc8a"><con:settings/><con:parameters/><con:method name="getAppointmentsAvailableCalendar_id" id="25faaa36-561c-4b03-a130-42360dd82ae4" method="GET"><con:description>Lista la disponiblidad de citas en una fecha dada
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>calendar_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del calendario</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="249218e3-9b53-4aa9-b402-e111b67805f1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/appointments/available/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="calendar_id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>calendar_id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/appointments/cancel/{appointment_id}" path="/appointments/cancel/{appointment_id}" id="bff20024-a5e5-4871-8378-02d958d44652"><con:settings/><con:parameters/><con:method name="putAppointmentsCancelAppointment_id" id="4df6a20d-425a-48e9-8409-548ae7b5c107" method="PUT"><con:description>Cancela una cita
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appointment_id</con:name><con:style>TEMPLATE</con:style><con:description>ID de la cita</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="43a946ac-ec73-4768-aa59-6cd2c8436795" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/appointments/confirm/{appointment_id}" path="/appointments/confirm/{appointment_id}" id="d9f6beaf-b317-4aa2-ba3e-cec42b86610f"><con:settings/><con:parameters/><con:method name="putAppointmentsConfirmAppointment_id" id="e653dd76-3de3-463e-b94b-d6a02af71870" method="PUT"><con:description>
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appointment_id</con:name><con:style>TEMPLATE</con:style><con:description>ID de la cita</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="afc89e91-74b5-4e2c-8fcc-9a3f0b05778f" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/appointments/listByApplyer/{applyer_id}" path="/appointments/listByApplyer/{applyer_id}" id="080efb5f-c27a-40bc-aba9-0b5e5b5d22dd"><con:settings/><con:parameters/><con:method name="getAppointmentsListByApplyerApplyer_id" id="62833791-fac6-4bf8-9407-4ac24c594600" method="GET"><con:description>Lista todas las citas futuras solicitadas de un solicitante
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>applyer_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del solicitante de la cita</con:description></con:parameter><con:parameter required="true"><con:name>page</con:name><con:style>QUERY</con:style><con:description>Parámetros de paginación</con:description></con:parameter><con:parameter required="true"><con:name>app_key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="fead0778-fd0b-4777-8973-b7e4dfc4c644" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/appointments/listByApplyer/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="page" value="1"/>
  <con:entry key="domain" value="prueba"/>
  <con:entry key="applyer_id" value="312"/>
  <con:entry key="app_key" value="simple"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="/appointments/listByCalendar/{calendar_id}" path="/appointments/listByCalendar/{calendar_id}" id="3b7b534f-3821-496c-bfec-2b9ed932542a"><con:settings/><con:parameters/><con:method name="getAppointmentsListByCalendarCalendar_id" id="9ab24e42-fea8-4093-866f-b046da86006d" method="GET"><con:description>Lista todas las citas futuras de un usuario por agenda
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>calendar_id</con:name><con:style>TEMPLATE</con:style><con:description>ID de la agenda</con:description></con:parameter><con:parameter required="true"><con:name>page</con:name><con:style>QUERY</con:style><con:description>Parámetros de paginación</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e6fe7784-d231-4bbc-8d5d-bada8895e766" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/appointments/listByOwner/{owner_id}" path="/appointments/listByOwner/{owner_id}" id="dcd200b5-106e-49b6-b395-d025da0bc0af"><con:settings/><con:parameters/><con:method name="getAppointmentsListByOwnerOwner_id" id="f486839a-4016-4840-8deb-6d1684fe51d1" method="GET"><con:description>Lista todas las citas futuras solicitadas de un propietario
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>owner_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del propietario de la agenda</con:description></con:parameter><con:parameter required="true"><con:name>page</con:name><con:style>QUERY</con:style><con:description>Parámetros de paginación</con:description></con:parameter><con:parameter required="true"><con:name>app key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="0786ec07-cf03-4cab-9dce-a11971bf1a07" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/appointments/reserve" path="/appointments/reserve" id="41148b39-2ca5-455e-bc91-569820eedc32"><con:settings/><con:parameters><con:parameter><con:name>appkey</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>domain</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="postAppointmentsReserve" id="a6d78b84-03cb-41b0-a395-8425a2dad47a" method="POST"><con:description>Reserva una cita
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:res="http://localhost/v1/appointments/reserve">res:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="62871b47-b5f2-4860-8b05-37370ff9d642" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/appointments/reserve</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="domain" value="prueba"/>
  <con:entry key="appkey" value="simple"/>
</con:parameters><con:parameterOrder><con:entry>appkey</con:entry><con:entry>domain</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/blockSchedules" path="/blockSchedules" id="09351401-142e-495e-bea7-0fcb5996a39a"><con:settings/><con:parameters><con:parameter><con:name>calendar_id</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="postBlockSchedules" id="7883e3bd-364d-4a32-a9cb-1d80086b4c27" method="POST"><con:description>Crea Bloqueo de días sobre una agenda
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201 200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="32fdee7f-b460-41cd-adc1-7939e3217b67" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/blockSchedules</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="calendar_id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>calendar_id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/blockSchedules/{block_schedule_id}" path="/blockSchedules/{block_schedule_id}" id="ac35d73c-27b7-44cf-b9e5-e29ca535a989"><con:settings/><con:parameters/><con:method name="deleteBlockSchedulesBlock_schedule_id" id="13a78fe5-5da9-4350-995d-f65c64e79f77" method="DELETE"><con:description>Elimina el bloqueo de un horario
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>block_schedule_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del bloqueo de horario</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="8a070d6a-11d5-4471-abbe-1fd718278151" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/calendars" path="/calendars" id="ab8d8e60-d292-47bc-96ef-f86566a2e548"><con:settings/><con:parameters><con:parameter><con:name>appkey</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>domain</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>name</con:name><con:value/><con:style>PLAIN</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getCalendars" id="f517e783-0f6e-4d29-82e4-f1689952238f" method="GET"><con:description>Lista todas las instancias de agenda
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>page</con:name><con:style>QUERY</con:style><con:description>Parámetros de paginación</con:description></con:parameter><con:parameter required="true"><con:name>app_key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="a0e6a3d6-5153-4ce5-a644-03882f1c244a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/calendars</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="page" value="1"/>
  <con:entry key="domain" value="prueba"/>
  <con:entry key="app_key" value="simple"/>
</con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>app_key</con:entry><con:entry>domain</con:entry><con:entry>appkey</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method><con:method name="postCalendars" id="d5365323-1009-4a2c-a33a-b8da4ed3a307" method="POST"><con:description>Crea instancias de agenda para un usuario o grupo
data</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:cal="http://dev2.arkho.tech/v1/calendars">cal:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="95caf2cf-f6c7-4b80-a04e-a8b125ac8041" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://dev2.arkho.tech:80</con:endpoint><con:request/><con:originalUri>http://dev2.arkho.tech/v1/calendars</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="name" value="Agenda Erick"/>
  <con:entry key="appkey" value="simple"/>
  <con:entry key="domain" value="prueba"/>
</con:parameters><con:parameterOrder><con:entry>appkey</con:entry><con:entry>domain</con:entry><con:entry>name</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/calendars/disable/{calendar_id}" path="/calendars/disable/{calendar_id}" id="8ba1ea94-74fe-4f24-b4f2-692bb8082951"><con:settings/><con:parameters/><con:method name="putCalendarsDisableCalendar_id" id="18a66521-746b-4395-8ad4-2b391278c951" method="PUT"><con:description>Deshabilita una agenda
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>calendar_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del calendario</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="1519de5b-7465-4500-a1c6-bb58e58522e7" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/calendars/listByOwner/{owner_id}" path="/calendars/listByOwner/{owner_id}" id="0d89918a-09c0-450d-9e22-0d0e0a38c8a2"><con:settings/><con:parameters/><con:method name="getCalendarsListByOwnerOwner_id" id="8b325c5e-33f2-4088-b6f4-4e16ac63d084" method="GET"><con:description>Lista todas las instancias de agenda que pertenecen a un usuario
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>owner_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del propietario de la agenda</con:description></con:parameter><con:parameter required="true"><con:name>app_key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application-json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://localhost/v1/calendars/listByOwner/312">ns:Fault</con:element></con:representation><con:request name="Request 1" id="7c277cf0-b023-4982-9a14-17afdf69a3cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/calendars/listByOwner/312</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="owner_id" value="312"/>
  <con:entry key="domain" value="prueba"/>
  <con:entry key="app_key" value="simple"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="/calendars/searchByName" path="/calendars/searchByName" id="1294b277-83e8-473b-913f-84d3640e00d4"><con:settings/><con:parameters/><con:method name="getCalendarsSearchByName" id="1ecb2f97-1acc-4c85-afa6-9d5038e85428" method="GET"><con:description>Filtra por nombre de la agenda o propietario de la agenda
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>text</con:name><con:style>QUERY</con:style><con:description>Texto coincidente a buscar en el campo pertenece a o nombre agenda</con:description></con:parameter><con:parameter required="true"><con:name>app_key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="7c248cf6-f49a-4d8e-be7a-e789ff9a8e18" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/calendars/{calendar_id}" path="/calendars/{calendar_id}" id="de643217-b315-426b-874a-bc135f3a9e12"><con:settings/><con:parameters/><con:method name="putCalendarsCalendar_id" id="ca695c47-68b2-4387-94a2-9fcaa72b1baa" method="PUT"><con:description>Actualiza una instancia de agenda
UpdateCalendar</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>calendar_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del calendario</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="4540ba0a-65b7-4ec6-8f57-f145dbb9a600" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/calendars/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/daysOff" path="/daysOff" id="4ee2cd38-ffe6-45af-abdb-5a98ac43ef4c"><con:settings/><con:parameters/><con:method name="getDaysOff" id="d9283768-d7a7-447f-998d-931df89c271c" method="GET"><con:description>Lista todos los días no laborables futuros
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>app_key</con:name><con:style>HEADER</con:style><con:description>App key</con:description></con:parameter><con:parameter required="true"><con:name>domain</con:name><con:style>HEADER</con:style><con:description>Dominios de una App</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="944dfadb-4dbb-4f09-b7d9-93a3666c6feb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://localhost/v1/daysOff</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="domain" value="prueba"/>
  <con:entry key="app_key" value="simple"/>
</con:parameters></con:request></con:method><con:method name="postDaysOff" id="b8edba05-b08c-4817-91fa-5d4445bc14c1" method="POST"><con:description>Crea días no laborables
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="2082a18f-1f86-4d61-a447-21cb911cfa07" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/daysOff/{day_off_id}/" path="/daysOff/{day_off_id}/" id="99b2d006-d1bc-4a37-b80f-9df7ba0f6d5d"><con:settings/><con:parameters/><con:method name="deleteDaysOffDay_off_id" id="c23e5a2c-7669-42a2-97c6-86f69b7f20b6" method="DELETE"><con:description>Elimina un día no laboral
</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>day_off_id</con:name><con:style>TEMPLATE</con:style><con:description>ID del día laboral a eliminar</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Request 1" id="f7ccec3e-40de-49b7-a9ee-d74399635a88" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:80</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="f3b63120-38fe-4ca3-8052-2c7ccd34cd65" port="8089" path="/" host="Marcelos-MBP" name="Calendar REST Services"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.mock.WsdlMockServiceDesktopPanel$LogListModel@maxSize">100</con:setting></con:settings><con:properties/><con:restMockAction name="/v1/appointment/assists/" method="PUT" resourcePath="/v1/appointment/assists/" id="07bd0601-6efd-4456-9d3d-c762192522c3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="18b42626-5083-4b37-aacb-48eda69b8bf0" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/available/" method="GET" resourcePath="/v1/appointments/available/" id="7b1e509d-35de-4ebb-96a7-1628b5af8591"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4873d95b-4140-4a6d-8217-0107b7ac5dcb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response":{
    "code":200,
    "message":"Ok"
  },
  "appointmentsavailable":[
    {
      "2016-08-26":[
        {
          "applyer_email":"prueba@prueba.com",
          "applyer_name":"ciudadano",
          "appoinment_time":"15:00",
          "available":"B",
          "owner_name":"Propietario de la agenda",
          "subject":"asunto",
          "time":"15:00"
        },{
          "applyer_email":"prueba@prueba.com",
          "applyer_name":"ciudadano2",
          "appoinment_time":"15:30",
          "available":"R",
          "owner_name":"Propietario de la agenda",
          "subject":"asunto",
          "time":"15:00"
        },{
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"16:00",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        },{
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"16:30",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        },{
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"15:00",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        }
      ]
    },
    {
      "2016-08-27":[
        {
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"16:00",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        },{
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"16:30",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        },{
          "applyer_email":"",
          "applyer_name":"",
          "appoinment_time":"15:00",
          "available":"D",
          "owner_name":"Propietario de la agenda",
          "subject":"",
          "time":"15:00"
        }
      ]
    }
    ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/cancel/" method="PUT" resourcePath="/v1/appointments/cancel/" id="dd870e8a-a9df-441f-8c33-a1125c737a4b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7acb1cec-e932-4c0e-8ff7-5a1346d4ced2" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/confirm/" method="PUT" resourcePath="/v1/appointments/confirm/" id="363d62bc-d168-4faa-8aef-2bbc967ef2b7"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a583bee2-94ee-40d7-99e1-48a27f03c7a2" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/listByApplyer/" method="GET" resourcePath="/v1/appointments/listByApplyer/" id="9a89cb7b-73b5-41e1-9208-ff30c64d0c69"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>log.info "hit"

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="6b3faedc-dca7-41bf-8b9b-8304a596d90c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "appointments": [
  	{
      "appointment_id": 1,
      "subject": "Certificado1",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/27/2016 09:30"
    },
    {
      "appointment_id": 1,
      "subject": "Certificado2",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/30/2016 09:30"
    },
    {
      "appointment_id": 1,
      "subject": "Certificado3",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/29/2016 09:30"
    },
    {
      "appointment_id": 1,
      "subject": "Certificado4",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/28/2016 09:30"
    },
    {
      "appointment_id": 2,
      "subject": "Movilidad",
      "owner_name": "Secretario de Movilidad",
      "appoinment_time":"08/27/2016 09:30"
    },
    {
      "appointment_id": 2,
      "subject": "Movilidad",
      "owner_name": "Secretario de Movilidad",
      "appoinment_time":"08/27/2016 09:30"
    },
    {
      "appointment_id": 2,
      "subject": "Movilidad",
      "owner_name": "Secretario de Movilidad",
      "appoinment_time":"08/27/2016 09:30"
    }
  ],
  "response":{
    "code":200,
    "message":"Ok"
  },
  "count":100
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/listByCalendar/" method="GET" resourcePath="/v1/appointments/listByCalendar/" id="df38fc8d-424e-4adf-b884-316b03fcaf1e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3ddf2c1f-e3ff-441b-826e-2e2058ddfcf8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "appointments": [
  	{
      "appointment_id": 1,
      "subject": "Certificado",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/23/2016"
    },
    {
      "appointment_id": 1,
      "subject": "Certificado",
      "owner_name": "Ministerio de Educación",
      "appoinment_time":"08/24/2016"
    },
    {
      "appointment_id": 2,
      "subject": "Movilidad",
      "owner_name": "Secretario de Movilidad",
      "appoinment_time":"08/26/2016"
    }
  ],
  "response":{
    "code":200,
    "message":"Ok"
  },
  "count":100
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/listByOwner/" method="GET" resourcePath="/v1/appointments/listByOwner/" id="90acf749-b7d8-438a-8292-88507a693692"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2a3adf3e-853e-4067-8259-ff4d37fd1f87" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/v1/appointments/reserve" method="POST" resourcePath="/v1/appointments/reserve" id="1c369af4-1e6e-4b11-9858-9b5e01888d12"><con:settings/><con:defaultResponse>OK</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def headers = mockRequest.getRequestHeaders()
log.info "AcceptEncoding Header List: " + headers

if(headers.get("appkey")==null  || headers.get("domain") == null ){
	return "400"
}

return "200"

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1031b24f-64fe-4222-9e77-f04ce3b0af5f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response":{
    "code":200,
    "message":"Ok"
  },
  "appointment":{
  	"id":2
  }
}</con:responseContent></con:response><con:response name="FechaSinFormato" id="a565ae73-8d18-4da3-960b-0e8a6a0314a4" httpResponseStatus="406" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 120,
    "message": "El formato de hora no esta permitido"
    }
}</con:responseContent></con:response><con:response name="400" id="4d526385-087f-4d2f-aa5e-7bcdfde28730" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 120,
    "message": "Falta un header de autorización appkey o domain"
  }
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/blockSchedules" method="POST" resourcePath="/v1/blockSchedules" id="accaf5c5-77a7-49dc-90d8-3e7d697e2f9a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d075261f-71a0-410a-a7ae-40acf2fae234" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response":{
    "code":200,
    "message":"Ok"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/blockSchedules/" method="DELETE" resourcePath="/v1/blockSchedules/" id="33ef44d1-e3cd-4c73-b82f-4f63ebe042d8"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7f795306-bdc9-4c9c-b6d4-1efd6e61cc29" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/v1/calendars" method="GET" resourcePath="/v1/calendars" id="e8e85b63-9451-4789-9f27-1224bd54fe52"><con:settings/><con:defaultResponse>fullList</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>// Match based on header

log.info mockRequest.getRequestHeaders()

def appkey = mockRequest.getRequestHeaders().get("app_key")
def domain = mockRequest.getRequestHeaders().get("domain")
log.info "Find ket" + appkey + "->" + domain

log.info appkey.contains("simple") &amp;&amp; domain.contains("prueba")

if( appkey.contains("simple") &amp;&amp; domain.contains("prueba") )
{
    // return the name of the response you want to dispatch
    return "fullList"
}else{
	
	return "nodata"
}</con:dispatchPath><con:response name="fullList" id="6737d892-f888-4df1-b429-e59f0921d05b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script/><con:responseContent>{
  "calendars": [
    {
      "concurrency": 1,
      "id": 1,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Agenda Medica",
      "owner_id": "harenas",
      "owner_name": "Hector Arenas",
      "schedule": "",
      "time_attention": 15
    },
     {
      "concurrency": 1,
      "id": 2,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Atneción consultas Licencias de Conducir",
      "owner_id": "jperez",
      "owner_name": "Javier Perez de Arce",
      "schedule": "",
      "time_attention": 15
    }, 
    {
      "concurrency": 1,
      "id": 3,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Reclamos Atención Municipal",
      "owner_id": "msilva",
      "owner_name": "Marcelo Silva",
      "schedule": "",
      "time_attention": 15
    }
     
  ],
  "count": 3,
  "response": {
    "code": 200,
    "message": "OK"
  }
}</con:responseContent><con:header><con:name>Access-Controll-Allow-Methods</con:name><con:value>GET,POST,DELETE,PUT,UPDATE,OPTIONS</con:value></con:header><con:header><con:name>Connection</con:name><con:value>keep-alive</con:value></con:header><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="nodata" id="ac1fb168-2153-450b-bce5-b96e486eaa69" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:script/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "El dominio no se encuentra"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="serverError" id="8d63a433-7274-4f03-9dc7-a1526d87d5a4" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 2,
    "message": "Error en la conexion de la fuente de datos"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/calendars" method="POST" resourcePath="/v1/calendars" id="4daf2ddc-204f-4906-b17e-595dfc8dc33c"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">serverError</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonSlurper

log.info mockRequest.requestContent

def content = mockRequest.requestContent

def jsonresponse = new JsonSlurper().parseText(content)

//

log.info "Path: "+ content.length()

if ( jsonresponse.concurrency == null ||
jsonresponse.name == null ||
jsonresponse.owner_id == null ||
jsonresponse.owner_name == null ||
jsonresponse.time_attention == null ||
jsonresponse.time_cancel_appointment == null ){

	return "badRequest"
}


if( content.length() > 0 )
{
    return "OK"
}


</con:dispatchPath><con:response name="OK" id="b601f763-953d-4292-9874-f567a1917cf3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "calendar": {
    "id": 124
  },
  "response": {
    "code": 0,
    "message": "Se ha guardado con exito"
  }
}</con:responseContent></con:response><con:response name="serverError" id="7199f91a-9f05-4e64-a31c-c0db079e48f3" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 2,
    "message": "La base de datos no esta disponible"
  }
}</con:responseContent></con:response><con:response name="badRequest" id="f57bef0c-9bdd-4bea-867a-ab789ae30464" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "Los parametros obligatorios no se han enviado"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/calendars/disable/" method="PUT" resourcePath="/v1/calendars/disable/" id="96a1b130-b321-4668-ad8f-9b1ad265afa8"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

def (a,b,c,calendar_id) = requestPath.tokenize("/")

log.info calendar_id

if(calendar_id == null ){
	return "noParameters"
}


if( calendar_id == "124" ){
	return "OK"
}else{
	return "noFound"
}
</con:dispatchPath><con:response name="OK" id="c6286b06-c4da-42a0-a567-205e224e03ab" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 0,
    "message": "La agenda ha sido deshabilitada exitosamente"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="noParameters" id="33eba502-483a-4277-98f1-a8c4034d7206" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 2,
    "message": "No se especificaron parametros"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="noFound" id="1de21bc1-77ac-4933-ad2c-60a36d9aab85" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "No se ha encontrado ninguna coincidencia"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/v1/calendars/listByOwner/" method="GET" resourcePath="/v1/calendars/listByOwner/" id="51001d0b-62c4-48e7-bf83-b11c1b211f64"><con:settings/><con:defaultResponse>noFound</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

def (a,b,c,nombre) = requestPath.tokenize("/")

log.info nombre

if(nombre == null){
	return "noParameters"
}


if( nombre == "316" ){
	return "OK"
}else if( nombre == "310"){
	return "OK2"
}else{
	return "noFound"
}
</con:dispatchPath><con:response name="OK" id="a402304a-7be9-434d-a09f-57eb1213533c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "calendars": [
    {
      "concurrency": 1,
      "id": 1,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Agenda Medica",
      "owner_id": "harenas",
      "owner_name": "Hector Arenas",
      "schedule": "",
      "time_attention": 15
    }
  ],
  "count": 1,
  "response": {
    "code": 200,
    "message": "OK"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="noParameters" id="5a4ca6a0-c1b6-4877-8275-2aedc1404923" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "No se han especificado parametros"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json</con:value></con:header></con:response><con:response name="noFound" id="ba895313-9bca-47ad-a8a1-8972b3f74dd6" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "No se ha encotrado ninguna coincidencia"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application-json</con:value></con:header></con:response><con:response name="serverError" id="6b0e8e9c-024f-47fa-8127-e220239717cd" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "No se ha encontrado conexion con la base de datos"
  }
}</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application-json</con:value></con:header></con:response><con:response name="OK2" id="d0524095-6e2a-47fe-8c0b-dcf8aa36a39c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "calendars": [
    {
      "concurrency": 1,
      "id": 11,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Pases Escolares",
      "owner_id": "310",
      "owner_name": "Hector Arenas",
      "schedule": "",
      "time_attention": 15
    },
     {
      "concurrency": 1,
      "id": 10,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Entrevistas",
      "owner_id": "310",
      "owner_name": "Hector Arenas",
      "schedule": "",
      "time_attention": 30
    }
  ],
  "count": 1,
  "response": {
    "code": 200,
    "message": "OK"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/calendars/searchByName" method="GET" resourcePath="/v1/calendars/searchByName" id="c60538c9-f572-41f8-8771-5f01fc4f2b79"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>

// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if(queryString != null &amp;&amp; queryString.contains("text") )
{
	def (var,valor) = queryString.tokenize("=")
	if(valor != null &amp;&amp; valor == "msilva")
	{
    		return "resultOK"
	}else{
		return "notFound"
	}
}else{
	return "noParameters"
}

</con:dispatchPath><con:response name="resultOK" id="346b5d1d-c097-4111-9b17-c8ae88390bf3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "calendars": [
    {
      "concurrency": 1,
      "id": 3,
      "ignore_non_working_days": 0,
      "is_group": 0,
      "name": "Reclamos Atención Municipal",
      "owner_id": "msilva",
      "owner_name": "Marcelo Silva",
      "schedule": "",
      "time_attention": 15
    }
  ],
  "count": 1,
  "response": {
    "code": 0,
    "message": "OK"
  }
}</con:responseContent></con:response><con:response name="notFound" id="b0fd991b-e5ba-4899-bdbb-d995847309e3" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "No se ha encontrado ninguna coincidencia"
  }
}</con:responseContent></con:response><con:response name="noParameters" id="1d217876-a013-4774-8924-7e824a65842e" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 2,
    "message": "No se ha especificado el parametro de busqueda"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/calendars/" method="PUT" resourcePath="/v1/calendars/" id="03ee537c-17f4-4867-992a-833b6ed569ab"><con:settings/><con:defaultResponse>serverError</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

def (a,b,codigo) = requestPath.tokenize("/")

log.info codigo

if( codigo.contains("124") ) 
{
	log.info "OK"
    return "updateOK"
}else{
	return "noExiste"
}
</con:dispatchPath><con:response name="updateOK" id="c2a69147-631b-4608-a5cc-b0fe31d809ac" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 0,
    "message": "Actualización existosa"
  }
}</con:responseContent></con:response><con:response name="noExiste" id="27563cec-b568-4996-a425-dab701d70ca0" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 1,
    "message": "El identificador de la agenda no existe"
  }
}</con:responseContent></con:response><con:response name="serverError" id="de8ae03f-71d3-4b22-a4f5-890df508f36a" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "response": {
    "code": 10,
    "message": "Se ha producido un error en la base de datos"
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/daysOff" method="GET" resourcePath="/v1/daysOff" id="6678b87c-f4f9-46dd-a96b-9a1ca38e52e1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString
/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="bcf2d46c-a486-4a70-84d3-9ea78a44f858" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "response":{
    "code":200,
    "message":"Ok"
  },
  "daysoff":[
      {
        "date_dayoff":"2016-08-22",
        "id":1,
        "name":"festivo3"
      },
      {
        "date_dayoff":"2016-08-15",
        "id":2,
        "name":"festivo2"
      },
      {
        "date_dayoff":"2016-08-05",
        "id":3,
        "name":"festivo1"
      }
    ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/v1/daysOff" method="POST" resourcePath="/v1/daysOff" id="a8e6cc83-ddee-4973-ac2c-5b402b8581c8"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="341227a6-ef19-40bb-91df-fef4803124d8" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/v1/daysOff//" method="DELETE" resourcePath="/v1/daysOff//" id="139de5bc-3315-42e2-81f8-d970389da9a5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0e60749e-d8ca-4036-a942-01b60523e734" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>